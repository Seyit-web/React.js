# Query: ResponseType
# Flags: CaseSensitive WordMatch
# ContextLines: 1

Результаты: 11 - Файлы 3

src\DAL\getUserPhoto.tsx:
   2  import { instance } from './Api'
   3: import { APIResponseType } from './headerAPI'
   4  import { PhotosType } from '../Types/types'

  11          formData.append("image", userPhoto);
  12:         const res = await instance.put<APIResponseType<PhotosType>>(`profile/photo`, formData, {
  13              headers: {

src\DAL\headerAPI.tsx:
  15  
  16: export type APIResponseType<D = {}, RC = ResultCodeEnum> = {
  17      data: D

  33      async forLogin() {
  34:         const response = await instance.get<APIResponseType<ForLoginResponseDataType>>(`auth/me`);
  35          return response.data

  37      // forLogin() {
  38:     //     return instance.get<APIResponseType<ForLoginResponseDataType>>(`auth/me`).then(response => response.data)
  39      // },

  41      logIn(email: string, password: string, rememberMe = false, captcha: null | string = null) {
  42:         return instance.post<APIResponseType<LogInResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>>(`auth/login`, { email, password, rememberMe, captcha })
  43      },

src\DAL\userAPI.tsx:
   2  import { GetItemsType, instance } from './Api'
   3: import { APIResponseType } from './headerAPI' 
   4  

  13      follow(userId: number) { 
  14:         return instance.post<APIResponseType>(`follow/${userId}`)
  15      },

  26  // import { GetItemsType, instance } from './Api'
  27: // import { APIResponseType } from './headerAPI' 
  28  

  37  //     async follow(userId: number) { 
  38: //         const res = await instance.post<APIResponseType>(`follow/${userId}`)
  39  //         return res.data

  42  //     unfollow(userId: number) { 
  43: //         return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>
  44  //     }
